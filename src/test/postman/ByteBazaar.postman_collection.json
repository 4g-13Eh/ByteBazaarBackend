{
	"info": {
		"_postman_id": "76e393c0-a5e2-458a-b375-05daf79512b9",
		"name": "ByteBazaar",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "26136977"
	},
	"item": [
		{
			"name": "warmup",
			"item": [
				{
					"name": "system warmup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"setTimeout(()=> {}, 10000);\r",
									"pm.execution.setNextRequest(\"signup\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": "localhost:8080/v3/api-docs"
					},
					"response": []
				}
			],
			"description": "folder with a request that serves as a warmup for the db / backend"
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "valid",
					"item": [
						{
							"name": "signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Token is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"pm.collectionVariables.set(\"token\", responseData.token);\r",
											"\r",
											"pm.execution.setNextRequest(\"signin\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"real@edging.com\",\r\n    \"password\": \"Erm...What_the_Sigma?!\",\r\n    \"confirmedPassword\": \"Erm...What_the_Sigma?!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/auth/signup"
							},
							"response": []
						},
						{
							"name": "signin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData.token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Token is a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
											"});\r",
											"\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"pm.collectionVariables.set(\"token\", responseData.token);\r",
											"\r",
											"pm.execution.setNextRequest(\"get all users\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"real@edging.com\",\r\n    \"password\": \"Erm...What_the_Sigma?!\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/auth/signin"
							},
							"response": []
						}
					]
				},
				{
					"name": "invalid",
					"item": [
						{
							"name": "invalid signup",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains the message 'Password must be at least'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include('Password must be at least');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid signin\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"real@undertail.com\",\r\n    \"password\": \"nyeh\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/auth/signup"
							},
							"response": []
						},
						{
							"name": "invalid signin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response Content-Type is text/plain\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response includes the error message 'An unexpected error occurred: Bad credentials'\", function () {\r",
											"    const responseData = pm.response.text();\r",
											"    \r",
											"    pm.expect(responseData).to.include(\"An unexpected error occurred: Bad credentials\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid email\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"real@undertail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/auth/signin"
							},
							"response": []
						},
						{
							"name": "invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response Content-Type is application/json\", function () {\r",
											"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response body contains the message 'Email must have valid format'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Email must have valid format\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid userId\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"real\",\r\n    \"password\": \"sigmasigmasigma\",\r\n    \"confirmedPassword\": \"sigmasigmasigma\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/auth/signup"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "valid",
					"item": [
						{
							"name": "get user by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('object');\r",
											"  pm.expect(responseData).to.have.property('userId');\r",
											"  pm.expect(responseData).to.have.property('email');\r",
											"  pm.expect(responseData).to.have.property('cartId');\r",
											"  pm.expect(responseData).to.have.property('username');\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Email is in a valid format\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData.email).to.be.a('string').and.to.match(/^.+@.+\\..+$/);\r",
											"});\r",
											"\r",
											"\r",
											"pm.execution.setNextRequest(\"get all items\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/users/{{userId}}"
							},
							"response": []
						},
						{
							"name": "get all users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(function(user) {\r",
											"        pm.expect(user).to.be.an('object');\r",
											"        pm.expect(user).to.have.property('userId');\r",
											"        pm.expect(user).to.have.property('email');\r",
											"        pm.expect(user).to.have.property('cartId');\r",
											"        pm.expect(user).to.have.property('username');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Email is in a valid format\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    responseData.forEach(function(user) {\r",
											"        pm.expect(user.email).to.be.a('string').and.to.match(/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/);\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"pm.collectionVariables.set(\"userId\", responseData[0].userId);\r",
											"pm.collectionVariables.set(\"cartId\", responseData[0].cartId);\r",
											"\r",
											"pm.execution.setNextRequest(\"get user by Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/users"
							},
							"response": []
						}
					]
				},
				{
					"name": "invlaid",
					"item": [
						{
							"name": "invalid userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"no auth users\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/users/803233snfjsnouiwfsj92"
							},
							"response": []
						},
						{
							"name": "no auth users",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is in an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid itemId\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/users"
							},
							"response": []
						}
					]
				}
			],
			"description": "API requests / tests regarding the user"
		},
		{
			"name": "items",
			"item": [
				{
					"name": "valid",
					"item": [
						{
							"name": "get item by Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.itemId).to.exist;\r",
											"    pm.expect(responseData.name).to.exist;\r",
											"    pm.expect(responseData.description).to.exist;\r",
											"    pm.expect(responseData.picture).to.exist;\r",
											"    pm.expect(responseData.price).to.exist;\r",
											"    pm.expect(responseData.in_stock).to.exist;\r",
											"    pm.expect(responseData.stock_num).to.exist;\r",
											"    pm.expect(responseData.categories).to.exist;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Price is a non-negative number\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData.price).to.be.a('number').and.to.be.at.least(0);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Categories array is present and contains expected number of elements\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('object');\r",
											"    pm.expect(responseData.categories).to.be.an('array');\r",
											"    pm.expect(responseData.categories.length).to.be.at.least(1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.collectionVariables.set(\"item\", JSON.stringify(pm.response.json()));\r",
											"\r",
											"const responseData = pm.response.json();\r",
											"pm.collectionVariables.set(\"category\", responseData.categories[0].categoryName);\r",
											"\r",
											"pm.execution.setNextRequest(\"get item by categories\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/items/{{itemId}}"
							},
							"response": []
						},
						{
							"name": "get all items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"    \r",
											"    responseData.forEach(item => {\r",
											"        pm.expect(item).to.have.property('itemId');\r",
											"        pm.expect(item).to.have.property('name');\r",
											"        pm.expect(item).to.have.property('description');\r",
											"        pm.expect(item).to.have.property('picture');\r",
											"        pm.expect(item).to.have.property('price');\r",
											"        pm.expect(item).to.have.property('in_stock');\r",
											"        pm.expect(item).to.have.property('stock_num');\r",
											"        pm.expect(item).to.have.property('categories');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Categories array is present and contains expected number of elements\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"  responseData.forEach(function(item) {\r",
											"    pm.expect(item.categories).to.be.an('array').that.is.not.empty;\r",
											"    pm.expect(item.categories).to.have.lengthOf.at.least(1);\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Category name must be a non-empty string\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array');\r",
											"  responseData.forEach(function(item) {\r",
											"    pm.expect(item.categories).to.be.an('array');\r",
											"    item.categories.forEach(function(category) {\r",
											"      pm.expect(category.categoryName).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");\r",
											"    });\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"const responseData = pm.response.json()[0].itemId;\r",
											"pm.collectionVariables.set(\"itemId\", responseData);\r",
											"\r",
											"pm.execution.setNextRequest(\"get item by Id\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/items"
							},
							"response": []
						},
						{
							"name": "get item by categories",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Content-Type is application/json\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has the required fields\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"  \r",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"  \r",
											"  responseData.forEach(item => {\r",
											"    pm.expect(item).to.have.property('itemId').that.is.a('string');\r",
											"    pm.expect(item).to.have.property('name').that.is.a('string');\r",
											"    pm.expect(item).to.have.property('description').that.is.a('string');\r",
											"    pm.expect(item).to.have.property('picture').that.is.a('string');\r",
											"    pm.expect(item).to.have.property('price').that.is.a('number');\r",
											"    pm.expect(item).to.have.property('in_stock').that.is.a('boolean');\r",
											"    pm.expect(item).to.have.property('stock_num').that.is.a('number');\r",
											"    \r",
											"    pm.expect(item).to.have.property('categories').that.is.an('array').that.is.not.empty;\r",
											"    item.categories.forEach(category => {\r",
											"      pm.expect(category).to.have.property('id').that.is.a('number');\r",
											"      pm.expect(category).to.have.property('categoryName').that.is.a('string');\r",
											"    });\r",
											"  });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Categories array is present and contains expected number of elements\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    pm.expect(responseData).to.have.lengthOf.at.least(1, \"Categories array should not be empty\");\r",
											"    responseData.forEach(function(item) {\r",
											"        pm.expect(item.categories).to.exist.and.to.be.an('array');\r",
											"        pm.expect(item.categories).to.have.lengthOf.at.least(1, \"Categories array should contain at least one element\");\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"add item to cart\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    \"{{category}}\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/items"
							},
							"response": []
						}
					]
				},
				{
					"name": "invalid",
					"item": [
						{
							"name": "invalid itemId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response Content-Type is text/plain\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"no auth items\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/items/87317jkah793"
							},
							"response": []
						},
						{
							"name": "no auth items",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 401\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(401);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid category\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/items"
							},
							"response": []
						},
						{
							"name": "invalid category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"  pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response body is null\", function () {\r",
											"  var responseXML = xml2Json(pm.response.text());\r",
											"  pm.expect(responseXML).to.be.null;\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid cartid\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n    \"Spezi\"\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/items"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "shoppingcarts",
			"item": [
				{
					"name": "valid",
					"item": [
						{
							"name": "get total quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response has a valid JSON schema\", function () {\r",
											"    pm.response.to.have.jsonSchema({\r",
											"        \"type\": \"number\"\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"update quantity\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/carts/quantity/{{cartId}}"
							},
							"response": []
						},
						{
							"name": "add item to cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"get total quantity\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemId\": \"{{itemId}}\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/carts/{{cartId}}"
							},
							"response": []
						},
						{
							"name": "update quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is null\", function () {\r",
											"    const responseData = xml2Json(pm.response.text());\r",
											"    pm.expect(responseData).to.be.null;\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"get cartitems\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "10",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/carts/quantity/{{cartId}}/{{itemId}}"
							},
							"response": []
						},
						{
							"name": "remove item",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body schema is validated against the expected schema for a successful deletion\", function () {\r",
											"    const responseData = xml2Json(pm.response.text());\r",
											"    \r",
											"    pm.expect(responseData).to.be.null;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is null\", function () {\r",
											"    const responseData = xml2Json(pm.response.text());\r",
											"    pm.expect(responseData).to.be.null;\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid signup\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{path}}/carts/{{cartId}}/{{itemId}}"
							},
							"response": []
						},
						{
							"name": "get cartitems",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body has the required fields\", function () {\r",
											"    const responseData = pm.response.json();\r",
											"    \r",
											"    pm.expect(responseData).to.be.an('array');\r",
											"    \r",
											"    responseData.forEach(function(item) {\r",
											"        pm.expect(item).to.have.property('id');\r",
											"        pm.expect(item).to.have.property('cartItem');\r",
											"        pm.expect(item).to.have.property('quantity');\r",
											"    });\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Validate the schema of cartItem\", function () {\r",
											"  const responseData = pm.response.json();\r",
											"\r",
											"  pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
											"  \r",
											"  responseData.forEach(item => {\r",
											"    pm.expect(item).to.have.property('id');\r",
											"    pm.expect(item.cartItem).to.be.an('object');\r",
											"    pm.expect(item.cartItem.itemId).to.be.a('string');\r",
											"    pm.expect(item.cartItem.name).to.be.a('string');\r",
											"    pm.expect(item.cartItem.description).to.be.a('string');\r",
											"    pm.expect(item.cartItem.picture).to.be.a('string');\r",
											"    pm.expect(item.cartItem.price).to.be.a('number');\r",
											"    pm.expect(item.cartItem.in_stock).to.be.a('boolean');\r",
											"    pm.expect(item.cartItem.stock_num).to.be.a('number');\r",
											"    pm.expect(item.cartItem.categories).to.be.an('array');\r",
											"    item.cartItem.categories.forEach(category => {\r",
											"      pm.expect(category).to.have.property('id').that.is.a('number');\r",
											"      pm.expect(category).to.have.property('categoryName').that.is.a('string');\r",
											"    });\r",
											"  });\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"remove item\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/carts/{{cartId}}"
							},
							"response": []
						},
						{
							"name": "clear cart",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 204\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body is null\", function () {\r",
											"    const responseData = xml2Json(pm.response.text());\r",
											"    pm.expect(responseData).to.be.null;\r",
											"});\r",
											"\r",
											"\r",
											"pm.collectionVariables.unset(\"userId\");\r",
											"pm.collectionVariables.unset(\"cartId\");\r",
											"pm.collectionVariables.unset(\"category\");\r",
											"pm.collectionVariables.unset(\"item\");\r",
											"pm.collectionVariables.unset(\"itemId\");\r",
											"\r",
											"setTimeout(()=> {pm.execution.setNextRequest(\"expired jwt\")}, 20000);\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{path}}/carts/{{cartId}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "invalid",
					"item": [
						{
							"name": "invalid cartid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"  pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid itemId update\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{path}}/carts/quantity/tghb654r"
							},
							"response": []
						},
						{
							"name": "invalid itemId update",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 404\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(404);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response content type is text/plain\", function () {\r",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"text/plain\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response body contains 'Item not found'\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Item not found\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.execution.setNextRequest(\"invalid quantity\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"itemId\": \"sad^243p\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/carts/{{cartId}}"
							},
							"response": []
						},
						{
							"name": "invalid quantity",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(400);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Response time is within an acceptable range\", function () {\r",
											"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Verify that the response contains an error message\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid request body. Please provide a valid quantity in numeric format.\");\r",
											"});\r",
											"\r",
											"\r",
											"pm.execution.setNextRequest(\"clear cart\");\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"abc\"",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{path}}/carts/quantity/{{cartId}}/{{itemId}}"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "invalid jwt",
			"item": [
				{
					"name": "expired jwt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'JWT expired'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"JWT expired\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.unset(\"token\");\r",
									"pm.execution.setNextRequest(\"empty bearer token\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{path}}/items"
					},
					"response": []
				},
				{
					"name": "empty bearer token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 401\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(401);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains 'JWT strings must contain exactly 2 period'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"JWT strings must contain exactly 2 period\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.execution.setNextRequest(null);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "GET",
						"header": [],
						"url": "{{path}}/items"
					},
					"response": []
				}
			],
			"description": "requests / tests for invalidity of the jwt"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "path",
			"value": "localhost:8080/api",
			"type": "string"
		}
	]
}